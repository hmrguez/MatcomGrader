using Common;
using Exam;
using Grader;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace AutoGrader;

[TestFixture]
public class Tests
{
    // Counters to track test outcomes
    private int _passedCount = 0;
    private int _exceptionCount = 0;
    private int _timeoutCount = 0;

    [TearDown]
    public void TearDown()
    {
        // Determine the outcome of the test
        var outcome = TestContext.CurrentContext.Result.Outcome.Status;
        var message = TestContext.CurrentContext.Result.Message;

        Console.WriteLine("Outcome: " + outcome);
        Console.WriteLine("Message: " + message);

        switch (outcome)
        {
            case NUnit.Framework.Interfaces.TestStatus.Passed:
                _passedCount++;
                break;
            case NUnit.Framework.Interfaces.TestStatus.Failed:
                if (message.Contains("Timeout"))
                {
                    _timeoutCount++;
                }
                else
                {
                    _exceptionCount++;
                }

                break;
        }
    }

    [Test, Timeout(5000)]
    [TestCaseSource(nameof(GetTestCases))]
    public void AutoGeneratedSolutions(int input, int expectedOutput)
    {
        var solved = Solution.Solve(input);
        Assert.That(solved, Is.EqualTo(expectedOutput));
    }

    /// <summary>
    /// This method runs once after all tests in this fixture have executed.
    /// It's used for any necessary cleanup and writing to the .md file.
    /// </summary>
    [OneTimeTearDown]
    public void OneTimeTearDown()
    {
        const string mdPath = "../../../../results.md";
        var mdwriter = new MarkdownWriter(mdPath, new[] { "Name", "Passed", "Exceptions", "Timeouts" });
        
        mdwriter.AddRow("Jose", _passedCount.ToString(), _exceptionCount.ToString(), _timeoutCount.ToString());

        Console.WriteLine("Test summary written to results.md");
    }

    /// <summary>
    /// Provides test cases for the AutoGeneratedSolutions test method.
    /// </summary>
    /// <returns>An enumerable of TestCaseData, each containing input and expected output.</returns>
    public static IEnumerable<TestCaseData> GetTestCases()
    {
        // Define seed and number of test cases
        var seed = 42;
        var numberOfCases = 10;

        foreach (var testCase in Generator.GenerateTestCases(seed, numberOfCases))
        {
            yield return new TestCaseData(testCase[0], testCase[1])
                .SetName($"Input_{testCase[0]}_Expected_{testCase[1]}");
        }
    }
}