using Common;
using Exam;
using Grader;
using System.Diagnostics;

namespace AutoGrader
{
    [TestFixture]
    public class Tests
    {
        // Counters to track test outcomes
        private int _passedCount;
        private int _exceptionCount;
        private int _timeoutCount;

        // Stopwatch to measure test execution time
        private Stopwatch _stopwatch;

        /// <summary>
        /// Runs before each test to start the stopwatch.
        /// </summary>
        [SetUp]
        public void SetUp()
        {
            _stopwatch = Stopwatch.StartNew();
        }

        /// <summary>
        /// Runs after each test to update the counters based on the test result and execution time.
        /// </summary>
        [TearDown]
        public void TearDown()
        {
            _stopwatch.Stop();
            var duration = _stopwatch.Elapsed;

            // Check if the test took at least 5 seconds
            if (duration.TotalSeconds >= 5)
            {
                _timeoutCount++;
            }

            // Determine the outcome of the test
            var outcome = TestContext.CurrentContext.Result.Outcome.Status;

            switch (outcome)
            {
                case NUnit.Framework.Interfaces.TestStatus.Passed:
                    _passedCount++;
                    break;
                case NUnit.Framework.Interfaces.TestStatus.Failed:
                    // Check if the failure was due to a timeout
                    if (duration.TotalSeconds >= 5)
                    {
                        // Already counted as timeout
                    }
                    else
                    {
                        _exceptionCount++;
                    }
                    break;
            }
        }

        [Test]
        [TestCaseSource(nameof(GetTestCases))]
        public void AutoGeneratedSolutions(int input, int expectedOutput)
        {
            // Act
            var solved = Solution.Solve(input);

            // Assert
            Assert.That(solved, Is.EqualTo(expectedOutput));
        }

        /// <summary>
        /// This method runs once after all tests in this fixture have executed.
        /// It's used for any necessary cleanup and writing to the .md file.
        /// </summary>
        [OneTimeTearDown]
        public void OneTimeTearDown()
        {
            const string mdPath = "../../../../results.md";
            var mdwriter = new MarkdownWriter(mdPath, new[] { "Name", "Approved", "Exceptions", "Timeout" });
            mdwriter.AddRow("Jose", _passedCount.ToString(), _exceptionCount.ToString(), _timeoutCount.ToString());

            Console.WriteLine("Test summary written to results.md");
        }

        /// <summary>
        /// Provides test cases for the AutoGeneratedSolutions test method.
        /// </summary>
        /// <returns>An enumerable of TestCaseData, each containing input and expected output.</returns>
        public static IEnumerable<TestCaseData> GetTestCases()
        {
            // Define seed and number of test cases
            var seed = 42;
            var numberOfCases = 10;

            foreach (var testCase in Generator.GenerateTestCases(seed, numberOfCases))
            {
                yield return new TestCaseData(testCase[0], testCase[1])
                    .SetName($"Input_{testCase[0]}_Expected_{testCase[1]}");
            }
        }
    }
}